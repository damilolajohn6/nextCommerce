generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Store {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  userId      String
  billboards  Billboard[]
  categories  Category[]
  products    Product[]
  sizes       Size[]
  colors      Color[]
  orders      Order[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Billboard {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId
  store       Store     @relation(fields: [storeId], references: [id])
  billboardId String    @db.ObjectId
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String      @db.ObjectId
  store       Store       @relation(fields: [storeId], references: [id])
  categoryId  String      @db.ObjectId
  category    Category    @relation(fields: [categoryId], references: [id])
  name        String
  description String?     // New field for product description
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  variations  Variation[] // New relation to variations
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model Variation {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  productId   String      @db.ObjectId
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  sizeId      String?     @db.ObjectId
  size        Size?       @relation(fields: [sizeId], references: [id])
  colorId     String?     @db.ObjectId
  color       Color?      @relation(fields: [colorId], references: [id])
  price       Float
  stock       Int         @default(0)
  images      Image[]
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([productId])
  @@index([sizeId])
  @@index([colorId])
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String      @db.ObjectId
  store       Store       @relation(fields: [storeId], references: [id])
  orderItems  OrderItem[]
  isPaid      Boolean     @default(false)
  phone       String      @default("")
  address     String      @default("")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String      @db.ObjectId
  order       Order       @relation(fields: [orderId], references: [id])
  productId   String      @db.ObjectId
  product     Product     @relation(fields: [productId], references: [id])
  variationId String?     @db.ObjectId
  variation   Variation?  @relation(fields: [variationId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([orderId])
  @@index([productId])
  @@index([variationId])
}

model Size {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String      @db.ObjectId
  store       Store       @relation(fields: [storeId], references: [id])
  name        String
  value       String
  variations  Variation[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Color {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String      @db.ObjectId
  store       Store       @relation(fields: [storeId], references: [id])
  name        String
  value       String
  variations  Variation[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
}

model Image {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  productId   String?     @db.ObjectId
  product     Product?    @relation(fields: [productId], references: [id], onDelete: Cascade)
  variationId String?     @db.ObjectId
  variation   Variation?  @relation(fields: [variationId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([productId])
  @@index([variationId])
}
